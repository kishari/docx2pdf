
package hu.dbx.ecrion.xfws.client;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "xfwsSoap", targetNamespace = "http://www.ecrion.com/xfws/2.0")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface XfwsSoap {


    /**
     * Render the given input using the specified parameters. The function receives a XmlDataSource or a DASDataSource and returns a byte array with the resulting <b>PDF</b>, <b>AFP</b>, <b>POSTSCRIPT</b>, etc.<br/> The XmlDataSource must contain the bytes of a document in one of the supported input formats (XSL-FO, SVG, etc.). The DASDataSource must specify a DAS diagram and a DocumentTemplate. As additional parameters you must specify at least <b>OutputFormat</b>. If your documents contain external images referred through relative paths, you must also specify <b>BaseUrl</b>.
     * 
     * @param input
     * @param parameters
     * @return
     *     returns byte[]
     */
    @WebMethod(operationName = "Render", action = "http://www.ecrion.com/xfws/2.0/Render")
    @WebResult(name = "RenderResult", targetNamespace = "http://www.ecrion.com/xfws/2.0")
    @RequestWrapper(localName = "Render", targetNamespace = "http://www.ecrion.com/xfws/2.0", className = "hu.dbx.ecrion.xfws.client.Render")
    @ResponseWrapper(localName = "RenderResponse", targetNamespace = "http://www.ecrion.com/xfws/2.0", className = "hu.dbx.ecrion.xfws.client.RenderResponse")
    public byte[] render(
        @WebParam(name = "Input", targetNamespace = "http://www.ecrion.com/xfws/2.0")
        IDataSource input,
        @WebParam(name = "Parameters", targetNamespace = "http://www.ecrion.com/xfws/2.0")
        RenderingParameters parameters);

}
